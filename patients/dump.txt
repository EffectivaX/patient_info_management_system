# User = get_user_model()

# Create your forms here.

# PREFIX_CHOICES = [
#     ('MR', 'Mr.'),
#     ('MRS', 'Mrs.'),
#     ('MS', 'Ms.'),
# ]


# class PatientRegistrationForm(forms.Form):
#     prefix = forms.CharField(max_length=6)
#     first_name = forms.CharField(max_length=255)
#     last_name = forms.CharField(max_length=255)
#     date_of_birth = forms.DateField()
#     gender = forms.CharField(max_length=6)
#     home_address = forms.CharField(max_length=255)
#     national_id = forms.CharField(max_length=30)
#     phone_number = forms.CharField(max_length=30)
#     email_address = forms.EmailField()
#     purpose_of_visit = forms.CharField(max_length=255)
#     description_of_the_condition = forms.CharField(widget=forms.Textarea)
#     prescription = forms.CharField(max_length=255)
#     current_temperature = forms.IntegerField()
#     blood_type = forms.CharField(max_length=255)
#     current_medication = forms.CharField(max_length=255)
#     body_mass = forms.IntegerField()
#     allergies = forms.CharField(max_length=255)
#     employment_status = forms.CharField(max_length=20)
#     consulted_doctor = forms.CharField(max_length=255)
#     marital_status = forms.CharField(max_length=20)
#     medical_aid_group = forms.CharField(max_length=255)
#     date_of_visit = forms.DateField()

    # def save(self):
    #     self.slug = slugify(self.first_name) + slugify(self.last_name)
    #     super(Patient, self).save()

    # def __str__(self):
    #     return '{0} {1}'.format(self.first_name, self(last_name))

    # class Meta:
    #     verbose_name_plural = "Patients"
    #     ordering = ("-last_name", )
    #     # model = User

    # def save(self):
    #     patient = super(PatientRegistrationForm, self).save(commit=False)
    #     # user.set_password(self.cleaned_data['password1'])

    #     if commit:
    #         patient.save()
    #     return patient








    # fields = ('prefix','first_name', 'last_name', 'date_of_birth', 'gender', 'home_address', 'national_id', 'phone_number', 'email_address', 'purpose_of_visit', 'description_of_the_condition', 'prescription', 'current_temperature', 'blood_type', 'current_medication', 'body_mass', 'allergies', 'employment_status', 'consulted_doctor', 'marital_status', 'medical_aid_group', 'date_of_visit')



    <!-- Container for the Header -->
	{% comment %} <div class="container">
		<div class="row">
    		<h4 class="left light-blue-text lighten-3">{{ title }}</h4>
            <h6 class="right light-blue-text lighten-3">{% if logged %}
            Logged in as {{ admin.name }}
            {% else %}
            <a href="/login" class="btn waves-effect blue lighten-3">Login</a>
            {% endif %}</h6>
    	</div>
	</div> {% endcomment %}
    	<!-- Ending -->

        <!-- Container for the Header -->
	<div class="container">
		<div class="row">
    		<h4 class="left light-blue-text lighten-1">{{ title }}</h4>
    	</div>
	</div>
    	<!-- Ending of the Header container-->


   
    def clean(self):
        data = super(PatientForm, self).clean()
        
        prefix = cleaned_data.get('prefix')
        first_name = cleaned_data.get('first_name')
        last_name = cleaned_data.get('last_name')
        gender = cleaned_data.get('gender')
        date_of_birth = cleaned_data.get('date_of_birth')
        home_address = cleaned_data.get('home_address')
        national_id = cleaned_data.get('national_id')
        phone_number = cleaned_data.get('phone_number')
        email_address = cleaned_data.get('email_address')
        purpose_of_visit = cleaned_data.get('purpose_of_visit')
        description_of_the_condition = cleaned_data.get('description_of_the_condition')
        prescription = cleaned_data.get('prescription')
        current_temperature = cleaned_data.get('current_temperature')
        blood_type = cleaned_data.get('blood_type')
        current_medication = cleaned_data.get('current_medication')
        body_mass = cleaned_data.get('body_mass')
        allergies = cleaned_data.get('allergies')
        consulted_doctor = cleaned_data.get('consulted_doctor')
        employment_status = cleaned_data.get('employment_status')
        marital_status = cleaned_data.get('marital_status')
        medical_aid_group = cleaned_data.get('medical_aid_group')
        date_of_visit = cleaned_data.get('date_of_visit')

        if not first_name and not last_name and not gender and not date_of_birth and not national_id and not phone_number and not email_address and not purpose_of_visit and not description_of_the_condition and not prescription and not current_medication and not blood_type and not current_medication and not body_mass and not allergies and not consulted_doctor and not employment_status and not marital_status and not medical_aid_group and not date_of_visit:

            raise forms.validationError("You cannot leave blanks


# Function for adding a new patient to the system
# def add_patient(request):
#     if request.method == 'POST':
#         form = PatientForm(request.POST or None)
#         if form.is_valid():
#             patient_info = form.save(commit=True)
#             patient_info.save()
#             print("Saved Successfully")
#         return HttpResponseRedirect('/success.html')
#     else:
#         form = PatientModelForm()

#     context = {'form': form, "title": "Add New Patient"}

#     return render(request, 'patients/form.html', context)

# prefix = forms.CharField(label='Prefix',
    #     widget= forms.TextInput(attrs={'class': 'form-control col s3'}))
    
    # first_name = forms.CharField(label='First Name',
    #     widget= forms.TextInput(attrs={'class': 'form-control col s3'}))
    
    # last_name = forms.CharField(label='Last Name',
    #     widget= forms.TextInput(attrs={'class': 'form-control col s3'}))
    
    # date_of_birth = forms.CharField(label='Date of Visit',
    #     widget=forms.Textarea(attrs={'class': 'form-control col s3' }))
    
    # home_address = forms.CharField(label='Home Address',
    #     widget= forms.TextInput(attrs={'class': 'form-control col s6'}))
    
    # phone_number = forms.CharField(label='Phone Number',
    #     widget= forms.TextInput(attrs={'class': 'input-field col s6'}))
    
    # national_id = forms.CharField(label='National ID',
    #     widget= forms.TextInput(attrs={'class': 'input-field col s3'}))
    
    # email_address = forms.EmailField(label='Email Address',
    #     widget= forms.TextInput(attrs={'class': 'input-field col s3'}))
    
    # purpose_of_visit = forms.CharField(label='Purpose of Visit',
    #     widget= forms.TextInput(attrs={'class': 'input-field col s3'}))
    
    # description_of_the_condition = forms.CharField(label='DEscription of the Condition',
    #     widget=forms.Textarea(attrs={'class':'input-field col s12'}))
    
    # prescription = forms.CharField(label='Prescription',
    #     widget= forms.TextInput(attrs={'class': 'input-field col s3'}))
    
    # current_temperature = forms.CharField(label='Current Temperature',
    #     widget= forms.TextInput(attrs={'class': 'input-field col s3'}))
    
    # current_medication = forms.CharField(label='Current Medication',
    #     widget= forms.TextInput(attrs={'class': 'input-field col s6'}))
    
    # blood_type = forms.CharField(label='Blood Type',
    #     widget= forms.TextInput(attrs={'class': 'input-field col s3'}))
    
    # body_mass = forms.CharField(label='Body Mass',
    #     widget= forms.TextInput(attrs={'class': 'input-field col s3'}))
    
    # allergies = forms.CharField(label='Allergies',
    #     widget= forms.TextInput(attrs={'class': 'input-field col s6'}))
    
    # employment_status = forms.CharField(label='Employment Status',
    #     widget= forms.TextInput(attrs={'class': 'input-field col s3'}))
    
    # consulted_doctor = forms.CharField(label='Consulted Doctor',
    #     widget= forms.TextInput(attrs={'class': 'input-field col s3'}))
    
    # marital_status = forms.CharField(label='Marital Status',
    #     widget= forms.TextInput(attrs={'class': 'input-field col s3'}))
    
    # medical_aid_group = forms.CharField(label='Medical Aid Group',
    #     widget= forms.TextInput(attrs={'class': 'input-field col s3'}))
    
    # date_of_visit = forms.CharField(label='Date of Visit',
    #     widget=forms.Textarea(attrs={'class': 'input-field col s3' }))

    # class PatientForm(forms.Form):
#     prefix = forms.CharField(max_length=6)
#     first_name = forms.CharField(max_length=255)
#     last_name = forms.CharField(max_length=255)
#     date_of_birth = forms.DateField()
#     gender = forms.CharField(max_length=6)
#     home_address = forms.CharField(max_length=255)
#     national_id = forms.CharField(max_length=30)
#     phone_number = forms.CharField(max_length=30)
#     email_address = forms.EmailField()
#     purpose_of_visit = forms.CharField(max_length=255)
#     description_of_the_condition = forms.CharField(widget=forms.Textarea)
#     prescription = forms.CharField(max_length=255)
#     current_temperature = forms.IntegerField()
#     blood_type = forms.CharField(max_length=255)
#     current_medication = forms.CharField(max_length=255)
#     body_mass = forms.IntegerField()
#     allergies = forms.CharField(max_length=255)
#     employment_status = forms.CharField(max_length=20)
#     consulted_doctor = forms.CharField(max_length=255)
#     marital_status = forms.CharField(max_length=20)
#     medical_aid_group = forms.CharField(max_length=255)
#     date_of_visit = forms.DateField()
